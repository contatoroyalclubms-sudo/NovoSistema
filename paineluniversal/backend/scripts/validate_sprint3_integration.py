#!/usr/bin/env python3
"""
Script de valida√ß√£o da integra√ß√£o do Sprint 3 - EVENTOS CORE SYSTEM
Sistema Universal de Gest√£o de Eventos

Este script valida se todas as funcionalidades implementadas no Sprint 3
est√£o funcionando corretamente e integradas ao sistema existente.
"""

import asyncio
import os
import sys
import json
import tempfile
import requests
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any
from PIL import Image
import io

# Adicionar o diret√≥rio do app ao path
sys.path.append(str(Path(__file__).parent.parent))

class Sprint3Validator:
    """Validador completo do Sprint 3"""
    
    def __init__(self, backend_url: str = "http://localhost:8000", frontend_url: str = "http://localhost:3000"):
        self.backend_url = backend_url.rstrip('/')
        self.frontend_url = frontend_url.rstrip('/')
        self.session = requests.Session()
        self.auth_token = None
        self.test_user_id = None
        self.test_evento_id = None
        
        # Configura√ß√µes de teste
        self.test_data = {
            "user": {
                "nome": "Admin Teste Sprint 3",
                "email": f"admin_sprint3_{int(datetime.now().timestamp())}@test.com",
                "senha": "senha123456",
                "tipo_usuario": "admin"
            },
            "evento": {
                "nome": f"Evento Sprint 3 Test {datetime.now().strftime('%Y%m%d_%H%M%S')}",
                "descricao": "<h1>Evento de teste</h1><p>Este √© um evento criado para testar o <strong>Sprint 3</strong>.</p>",
                "tipo_evento": "conferencia",
                "data_inicio": (datetime.now() + timedelta(days=30)).isoformat(),
                "data_fim": (datetime.now() + timedelta(days=30, hours=8)).isoformat(),
                "local_nome": "Centro de Conven√ß√µes Sprint 3",
                "local_endereco": "Av. Teste Sprint 3, 123 - S√£o Paulo, SP",
                "capacidade_maxima": 500,
                "valor_entrada": 150.00,
                "cor_primaria": "#1E40AF",
                "cor_secundaria": "#374151",
                "cor_accent": "#10B981",
                "sistema_pontuacao_ativo": True,
                "pontos_checkin": 25,
                "pontos_participacao": 15,
                "requer_aprovacao": False,
                "permite_checkin_antecipado": True,
                "visibilidade": "publico",
                "webhook_checkin": "https://webhook.site/test",
                "email_confirmacao_template": "<h1>Bem-vindo ao {{ evento.nome }}!</h1><p>Ol√°, {{ participante.nome }}!</p>",
                "custom_css": ".event-header { background: linear-gradient(45deg, #1E40AF, #10B981); }",
                "badges_personalizadas": [
                    {
                        "name": "Early Bird",
                        "description": "Check-in antecipado",
                        "icon": "üê¶",
                        "condition": "checkin_early"
                    }
                ],
                "analytics_config": {
                    "google_analytics": "GA-TEST-123456"
                },
                "metadados_seo": {
                    "title": "Evento Sprint 3 - Teste",
                    "description": "Evento de teste para valida√ß√£o do Sprint 3",
                    "keywords": "teste, sprint3, eventos"
                },
                "tags": ["teste", "sprint3", "valida√ß√£o", "eventos"]
            }
        }
    
    def log(self, message: str, level: str = "INFO"):
        """Log com timestamp"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] [{level}] {message}")
    
    def create_test_image(self, width: int = 400, height: int = 300, color: str = 'blue') -> bytes:
        """Cria imagem de teste"""
        img = Image.new('RGB', (width, height), color=color)
        img_bytes = io.BytesIO()
        img.save(img_bytes, format='PNG')
        return img_bytes.getvalue()
    
    async def validate_backend_health(self) -> bool:
        """Valida se o backend est√° rodando e saud√°vel"""
        try:
            self.log("üîç Validando sa√∫de do backend...")
            response = requests.get(f"{self.backend_url}/health")
            
            if response.status_code == 200:
                health_data = response.json()
                self.log(f"‚úÖ Backend saud√°vel: {health_data.get('status', 'unknown')}")
                return True
            else:
                self.log(f"‚ùå Backend n√£o saud√°vel: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Erro ao conectar com backend: {e}", "ERROR")
            return False
    
    async def validate_frontend_health(self) -> bool:
        """Valida se o frontend est√° rodando"""
        try:
            self.log("üîç Validando sa√∫de do frontend...")
            response = requests.get(self.frontend_url, timeout=10)
            
            if response.status_code == 200:
                self.log("‚úÖ Frontend acess√≠vel")
                return True
            else:
                self.log(f"‚ùå Frontend n√£o acess√≠vel: {response.status_code}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Erro ao conectar com frontend: {e}", "ERROR")
            return False
    
    async def create_test_user(self) -> bool:
        """Cria usu√°rio de teste"""
        try:
            self.log("üë§ Criando usu√°rio de teste...")
            
            response = requests.post(
                f"{self.backend_url}/api/auth/register",
                json=self.test_data["user"]
            )
            
            if response.status_code in [200, 201]:
                user_data = response.json()
                self.test_user_id = user_data.get("id")
                self.log(f"‚úÖ Usu√°rio criado: {self.test_user_id}")
                return True
            else:
                self.log(f"‚ùå Erro ao criar usu√°rio: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o ao criar usu√°rio: {e}", "ERROR")
            return False
    
    async def authenticate_user(self) -> bool:
        """Autentica usu√°rio e obt√©m token"""
        try:
            self.log("üîê Autenticando usu√°rio...")
            
            login_data = {
                "username": self.test_data["user"]["email"],
                "password": self.test_data["user"]["senha"]
            }
            
            response = requests.post(
                f"{self.backend_url}/api/auth/login",
                data=login_data
            )
            
            if response.status_code == 200:
                auth_data = response.json()
                self.auth_token = auth_data.get("access_token")
                self.session.headers.update({
                    "Authorization": f"Bearer {self.auth_token}"
                })
                self.log("‚úÖ Usu√°rio autenticado")
                return True
            else:
                self.log(f"‚ùå Erro na autentica√ß√£o: {response.status_code} - {response.text}", "ERROR")
                return False
                
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o na autentica√ß√£o: {e}", "ERROR")
            return False
    
    async def validate_event_crud(self) -> bool:
        """Valida opera√ß√µes CRUD de eventos avan√ßadas"""
        try:
            self.log("üìÖ Validando CRUD de eventos avan√ßado...")
            
            # 1. Criar evento com recursos avan√ßados
            response = self.session.post(
                f"{self.backend_url}/api/eventos/",
                json=self.test_data["evento"]
            )
            
            if response.status_code not in [200, 201]:
                self.log(f"‚ùå Erro ao criar evento: {response.status_code} - {response.text}", "ERROR")
                return False
            
            evento_data = response.json()
            self.test_evento_id = evento_data.get("id")
            self.log(f"‚úÖ Evento criado com recursos avan√ßados: {self.test_evento_id}")
            
            # 2. Verificar campos avan√ßados
            advanced_fields = [
                "cor_accent", "custom_css", "sistema_pontuacao_ativo",
                "badges_personalizadas", "analytics_config", "metadados_seo"
            ]
            
            for field in advanced_fields:
                if field in evento_data and evento_data[field] is not None:
                    self.log(f"‚úÖ Campo avan√ßado presente: {field}")
                else:
                    self.log(f"‚ö†Ô∏è  Campo avan√ßado ausente: {field}", "WARNING")
            
            # 3. Atualizar evento
            update_data = {
                "nome": f"{self.test_data['evento']['nome']} - ATUALIZADO",
                "cor_primaria": "#FF6B6B"
            }
            
            response = self.session.put(
                f"{self.backend_url}/api/eventos/{self.test_evento_id}",
                json=update_data
            )
            
            if response.status_code == 200:
                self.log("‚úÖ Evento atualizado")
            else:
                self.log(f"‚ùå Erro ao atualizar evento: {response.status_code}", "ERROR")
                return False
            
            # 4. Buscar evento
            response = self.session.get(f"{self.backend_url}/api/eventos/{self.test_evento_id}")
            
            if response.status_code == 200:
                self.log("‚úÖ Evento recuperado")
            else:
                self.log(f"‚ùå Erro ao buscar evento: {response.status_code}", "ERROR")
                return False
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o no CRUD de eventos: {e}", "ERROR")
            return False
    
    async def validate_advanced_operations(self) -> bool:
        """Valida opera√ß√µes avan√ßadas (clonagem, bulk, etc.)"""
        try:
            self.log("üîÑ Validando opera√ß√µes avan√ßadas...")
            
            if not self.test_evento_id:
                self.log("‚ùå ID do evento n√£o dispon√≠vel para opera√ß√µes avan√ßadas", "ERROR")
                return False
            
            # 1. Clonagem de evento
            clone_data = {
                "nome_novo": f"Clone do {self.test_data['evento']['nome']}",
                "data_inicio": (datetime.now() + timedelta(days=60)).isoformat(),
                "data_fim": (datetime.now() + timedelta(days=60, hours=8)).isoformat(),
                "clonar_configuracoes": True,
                "alteracoes": {
                    "cor_primaria": "#9333EA"
                }
            }
            
            response = self.session.post(
                f"{self.backend_url}/api/eventos/{self.test_evento_id}/clone",
                json=clone_data
            )
            
            if response.status_code in [200, 201]:
                clone_data = response.json()
                clone_id = clone_data.get("id")
                self.log(f"‚úÖ Evento clonado: {clone_id}")
            else:
                self.log(f"‚ö†Ô∏è  Clonagem falhou: {response.status_code} - {response.text}", "WARNING")
            
            # 2. Opera√ß√£o em lote (teste com eventos fict√≠cios)
            bulk_data = {
                "evento_ids": [self.test_evento_id],
                "operacao": "pausar",
                "confirmar_operacao": True
            }
            
            response = self.session.post(
                f"{self.backend_url}/api/eventos/bulk-operation",
                json=bulk_data
            )
            
            if response.status_code == 200:
                self.log("‚úÖ Opera√ß√£o em lote executada")
            else:
                self.log(f"‚ö†Ô∏è  Opera√ß√£o em lote falhou: {response.status_code}", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o nas opera√ß√µes avan√ßadas: {e}", "ERROR")
            return False
    
    async def validate_file_upload(self) -> bool:
        """Valida sistema de upload de arquivos"""
        try:
            self.log("üìÅ Validando sistema de upload...")
            
            if not self.test_evento_id:
                self.log("‚ùå ID do evento n√£o dispon√≠vel para upload", "ERROR")
                return False
            
            # Criar imagem de teste
            logo_image = self.create_test_image(200, 200, 'red')
            banner_image = self.create_test_image(800, 400, 'blue')
            
            # Upload do logo
            files = {'file': ('logo_test.png', logo_image, 'image/png')}
            params = {'image_type': 'logo'}
            
            response = self.session.post(
                f"{self.backend_url}/api/eventos/{self.test_evento_id}/upload-image",
                files=files,
                params=params
            )
            
            if response.status_code in [200, 201]:
                self.log("‚úÖ Upload de logo realizado")
            else:
                self.log(f"‚ö†Ô∏è  Upload de logo falhou: {response.status_code}", "WARNING")
            
            # Upload do banner
            files = {'file': ('banner_test.png', banner_image, 'image/png')}
            params = {'image_type': 'banner'}
            
            response = self.session.post(
                f"{self.backend_url}/api/eventos/{self.test_evento_id}/upload-image",
                files=files,
                params=params
            )
            
            if response.status_code in [200, 201]:
                self.log("‚úÖ Upload de banner realizado")
            else:
                self.log(f"‚ö†Ô∏è  Upload de banner falhou: {response.status_code}", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o no upload: {e}", "ERROR")
            return False
    
    async def validate_qr_generation(self) -> bool:
        """Valida gera√ß√£o de QR Codes"""
        try:
            self.log("üî≤ Validando gera√ß√£o de QR Codes...")
            
            if not self.test_evento_id:
                self.log("‚ùå ID do evento n√£o dispon√≠vel para QR", "ERROR")
                return False
            
            # Tentar gerar QR Code (endpoint pode n√£o estar implementado ainda)
            response = self.session.post(
                f"{self.backend_url}/api/eventos/{self.test_evento_id}/generate-qr",
                json={"types": ["checkin", "checkout"]}
            )
            
            if response.status_code in [200, 201]:
                qr_data = response.json()
                self.log(f"‚úÖ QR Codes gerados: {len(qr_data.get('qr_files', {}))}")
            else:
                self.log(f"‚ö†Ô∏è  QR Code ainda n√£o implementado: {response.status_code}", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o na gera√ß√£o de QR: {e}", "ERROR")
            return False
    
    async def validate_email_templates(self) -> bool:
        """Valida sistema de templates de email"""
        try:
            self.log("üìß Validando templates de email...")
            
            if not self.test_evento_id:
                self.log("‚ùå ID do evento n√£o dispon√≠vel para email", "ERROR")
                return False
            
            # Testar preview de template
            response = self.session.get(
                f"{self.backend_url}/api/eventos/{self.test_evento_id}/email-preview/confirmacao"
            )
            
            if response.status_code == 200:
                preview_data = response.json()
                if "html" in preview_data and "subject" in preview_data:
                    self.log("‚úÖ Preview de template gerado")
                else:
                    self.log("‚ö†Ô∏è  Preview incompleto", "WARNING")
            else:
                self.log(f"‚ö†Ô∏è  Preview de email ainda n√£o implementado: {response.status_code}", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o nos templates de email: {e}", "ERROR")
            return False
    
    async def validate_webhooks(self) -> bool:
        """Valida sistema de webhooks"""
        try:
            self.log("üîó Validando sistema de webhooks...")
            
            # Testar webhook de teste
            webhook_data = {
                "url": "https://webhook.site/test-sprint3",
                "headers": {"X-Test": "Sprint3"}
            }
            
            response = self.session.post(
                f"{self.backend_url}/api/webhooks/test",
                json=webhook_data
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get("success"):
                    self.log("‚úÖ Webhook teste enviado")
                else:
                    self.log("‚ö†Ô∏è  Webhook teste falhou", "WARNING")
            else:
                self.log(f"‚ö†Ô∏è  Webhook ainda n√£o implementado: {response.status_code}", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o nos webhooks: {e}", "ERROR")
            return False
    
    async def validate_templates(self) -> bool:
        """Valida sistema de templates de eventos"""
        try:
            self.log("üìã Validando templates de eventos...")
            
            # Listar templates dispon√≠veis
            response = self.session.get(f"{self.backend_url}/api/eventos/templates")
            
            if response.status_code == 200:
                templates = response.json()
                self.log(f"‚úÖ Templates dispon√≠veis: {len(templates)}")
            else:
                self.log(f"‚ö†Ô∏è  Templates ainda n√£o implementados: {response.status_code}", "WARNING")
            
            # Criar template personalizado
            template_data = {
                "nome": "Template Sprint 3",
                "categoria": "teste",
                "template_data": {
                    "nome": "Template Teste",
                    "cor_primaria": "#FF6B6B",
                    "sistema_pontuacao_ativo": True
                },
                "publico": True
            }
            
            response = self.session.post(
                f"{self.backend_url}/api/eventos/templates",
                json=template_data
            )
            
            if response.status_code in [200, 201]:
                self.log("‚úÖ Template personalizado criado")
            else:
                self.log(f"‚ö†Ô∏è  Cria√ß√£o de template falhou: {response.status_code}", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o nos templates: {e}", "ERROR")
            return False
    
    async def validate_analytics(self) -> bool:
        """Valida sistema de analytics"""
        try:
            self.log("üìä Validando analytics de eventos...")
            
            if not self.test_evento_id:
                self.log("‚ùå ID do evento n√£o dispon√≠vel para analytics", "ERROR")
                return False
            
            # Buscar estat√≠sticas do evento
            response = self.session.get(f"{self.backend_url}/api/eventos/{self.test_evento_id}/stats")
            
            if response.status_code == 200:
                stats = response.json()
                required_fields = ["evento_id", "listas", "financeiro"]
                
                for field in required_fields:
                    if field in stats:
                        self.log(f"‚úÖ Campo de analytics presente: {field}")
                    else:
                        self.log(f"‚ö†Ô∏è  Campo de analytics ausente: {field}", "WARNING")
            else:
                self.log(f"‚ö†Ô∏è  Analytics ainda n√£o implementado: {response.status_code}", "WARNING")
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o no analytics: {e}", "ERROR")
            return False
    
    async def validate_frontend_integration(self) -> bool:
        """Valida integra√ß√£o com frontend"""
        try:
            self.log("üé® Validando integra√ß√£o com frontend...")
            
            # Verificar se p√°ginas importantes est√£o acess√≠veis
            pages_to_check = [
                "/eventos",
                "/eventos/novo",
                "/calendario",
                "/analytics"
            ]
            
            accessible_pages = 0
            
            for page in pages_to_check:
                try:
                    response = requests.get(f"{self.frontend_url}{page}", timeout=5)
                    if response.status_code == 200:
                        accessible_pages += 1
                        self.log(f"‚úÖ P√°gina acess√≠vel: {page}")
                    else:
                        self.log(f"‚ö†Ô∏è  P√°gina n√£o acess√≠vel: {page} ({response.status_code})", "WARNING")
                except:
                    self.log(f"‚ö†Ô∏è  Erro ao acessar p√°gina: {page}", "WARNING")
            
            if accessible_pages > 0:
                self.log(f"‚úÖ Frontend parcialmente integrado: {accessible_pages}/{len(pages_to_check)} p√°ginas")
                return True
            else:
                self.log("‚ùå Nenhuma p√°gina do frontend acess√≠vel", "ERROR")
                return False
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o na valida√ß√£o do frontend: {e}", "ERROR")
            return False
    
    async def validate_performance(self) -> bool:
        """Valida performance do sistema"""
        try:
            self.log("‚ö° Validando performance do sistema...")
            
            start_time = datetime.now()
            
            # Fazer v√°rias requisi√ß√µes para testar performance
            endpoints_to_test = [
                f"/api/eventos/",
                f"/api/eventos/templates",
                f"/api/eventos/upcoming"
            ]
            
            total_requests = 0
            successful_requests = 0
            
            for endpoint in endpoints_to_test:
                for i in range(5):  # 5 requests por endpoint
                    try:
                        response = self.session.get(f"{self.backend_url}{endpoint}")
                        total_requests += 1
                        
                        if response.status_code == 200:
                            successful_requests += 1
                    except:
                        total_requests += 1
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            success_rate = (successful_requests / total_requests) * 100 if total_requests > 0 else 0
            avg_response_time = duration / total_requests if total_requests > 0 else 0
            
            self.log(f"üìà Performance Report:")
            self.log(f"   Total requests: {total_requests}")
            self.log(f"   Successful: {successful_requests}")
            self.log(f"   Success rate: {success_rate:.1f}%")
            self.log(f"   Average response time: {avg_response_time:.3f}s")
            
            if success_rate >= 80 and avg_response_time < 1.0:
                self.log("‚úÖ Performance adequada")
                return True
            else:
                self.log("‚ö†Ô∏è  Performance abaixo do esperado", "WARNING")
                return False
            
        except Exception as e:
            self.log(f"‚ùå Exce√ß√£o na valida√ß√£o de performance: {e}", "ERROR")
            return False
    
    async def cleanup_test_data(self) -> bool:
        """Limpa dados de teste criados"""
        try:
            self.log("üßπ Limpando dados de teste...")
            
            # Deletar evento de teste
            if self.test_evento_id:
                response = self.session.delete(f"{self.backend_url}/api/eventos/{self.test_evento_id}")
                if response.status_code in [200, 204]:
                    self.log("‚úÖ Evento de teste removido")
                else:
                    self.log(f"‚ö†Ô∏è  N√£o foi poss√≠vel remover evento: {response.status_code}", "WARNING")
            
            # Note: Usu√°rio de teste pode ser mantido ou removido conforme pol√≠tica
            
            return True
            
        except Exception as e:
            self.log(f"‚ùå Erro na limpeza: {e}", "ERROR")
            return False
    
    async def run_full_validation(self) -> Dict[str, Any]:
        """Executa valida√ß√£o completa do Sprint 3"""
        self.log("üöÄ Iniciando valida√ß√£o completa do Sprint 3 - EVENTOS CORE SYSTEM")
        self.log("=" * 70)
        
        results = {}
        
        # 1. Valida√ß√µes de infraestrutura
        results["backend_health"] = await self.validate_backend_health()
        results["frontend_health"] = await self.validate_frontend_health()
        
        if not results["backend_health"]:
            self.log("‚ùå Backend n√£o est√° funcionando. Interrompendo valida√ß√£o.", "ERROR")
            return results
        
        # 2. Autentica√ß√£o
        results["user_creation"] = await self.create_test_user()
        results["authentication"] = await self.authenticate_user()
        
        if not results["authentication"]:
            self.log("‚ùå N√£o foi poss√≠vel autenticar. Continuando valida√ß√£o limitada.", "ERROR")
        
        # 3. Funcionalidades principais do Sprint 3
        results["event_crud"] = await self.validate_event_crud()
        results["advanced_operations"] = await self.validate_advanced_operations()
        results["file_upload"] = await self.validate_file_upload()
        results["qr_generation"] = await self.validate_qr_generation()
        results["email_templates"] = await self.validate_email_templates()
        results["webhooks"] = await self.validate_webhooks()
        results["templates"] = await self.validate_templates()
        results["analytics"] = await self.validate_analytics()
        
        # 4. Integra√ß√£o e performance
        results["frontend_integration"] = await self.validate_frontend_integration()
        results["performance"] = await self.validate_performance()
        
        # 5. Limpeza
        results["cleanup"] = await self.cleanup_test_data()
        
        # Relat√≥rio final
        self.generate_final_report(results)
        
        return results
    
    def generate_final_report(self, results: Dict[str, Any]):
        """Gera relat√≥rio final da valida√ß√£o"""
        self.log("=" * 70)
        self.log("üìã RELAT√ìRIO FINAL - SPRINT 3 VALIDATION")
        self.log("=" * 70)
        
        total_tests = len(results)
        passed_tests = sum(1 for result in results.values() if result)
        success_rate = (passed_tests / total_tests) * 100 if total_tests > 0 else 0
        
        self.log(f"üìä RESUMO GERAL:")
        self.log(f"   Total de testes: {total_tests}")
        self.log(f"   Testes aprovados: {passed_tests}")
        self.log(f"   Taxa de sucesso: {success_rate:.1f}%")
        self.log("")
        
        # Detalhamento por categoria
        categories = {
            "üèóÔ∏è  INFRAESTRUTURA": ["backend_health", "frontend_health"],
            "üîê AUTENTICA√á√ÉO": ["user_creation", "authentication"],
            "üìÖ EVENTOS CORE": ["event_crud", "advanced_operations"],
            "üìÅ UPLOAD & M√çDIA": ["file_upload", "qr_generation"],
            "üìß COMUNICA√á√ÉO": ["email_templates", "webhooks"],
            "üìã TEMPLATES & ANALYTICS": ["templates", "analytics"],
            "üîó INTEGRA√á√ÉO": ["frontend_integration", "performance"],
            "üßπ LIMPEZA": ["cleanup"]
        }
        
        for category, tests in categories.items():
            category_passed = sum(1 for test in tests if results.get(test, False))
            category_total = len(tests)
            category_rate = (category_passed / category_total) * 100 if category_total > 0 else 0
            
            status_icon = "‚úÖ" if category_rate == 100 else "‚ö†Ô∏è" if category_rate >= 50 else "‚ùå"
            
            self.log(f"{status_icon} {category}: {category_passed}/{category_total} ({category_rate:.0f}%)")
            
            for test in tests:
                test_status = "‚úÖ" if results.get(test, False) else "‚ùå"
                self.log(f"     {test_status} {test}")
        
        self.log("")
        
        # Status final
        if success_rate >= 90:
            self.log("üéâ SPRINT 3 VALIDA√á√ÉO: EXCELENTE! Sistema totalmente funcional.")
        elif success_rate >= 70:
            self.log("‚úÖ SPRINT 3 VALIDA√á√ÉO: BOM! Sistema majoritariamente funcional.")
        elif success_rate >= 50:
            self.log("‚ö†Ô∏è  SPRINT 3 VALIDA√á√ÉO: PARCIAL! Algumas funcionalidades precisam de aten√ß√£o.")
        else:
            self.log("‚ùå SPRINT 3 VALIDA√á√ÉO: CR√çTICO! Sistema precisa de corre√ß√µes urgentes.")
        
        self.log("=" * 70)
        
        # Salvar relat√≥rio em arquivo
        self.save_report_to_file(results, success_rate)
    
    def save_report_to_file(self, results: Dict[str, Any], success_rate: float):
        """Salva relat√≥rio em arquivo"""
        try:
            report_data = {
                "timestamp": datetime.now().isoformat(),
                "sprint": "Sprint 3 - EVENTOS CORE SYSTEM",
                "success_rate": success_rate,
                "results": results,
                "summary": {
                    "total_tests": len(results),
                    "passed_tests": sum(1 for result in results.values() if result),
                    "failed_tests": sum(1 for result in results.values() if not result)
                }
            }
            
            report_file = Path(__file__).parent / f"sprint3_validation_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            self.log(f"üìÑ Relat√≥rio salvo em: {report_file}")
            
        except Exception as e:
            self.log(f"‚ùå Erro ao salvar relat√≥rio: {e}", "ERROR")


async def main():
    """Fun√ß√£o principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Validador do Sprint 3 - Eventos Core System")
    parser.add_argument("--backend-url", default="http://localhost:8000", help="URL do backend")
    parser.add_argument("--frontend-url", default="http://localhost:3000", help="URL do frontend")
    
    args = parser.parse_args()
    
    validator = Sprint3Validator(
        backend_url=args.backend_url,
        frontend_url=args.frontend_url
    )
    
    results = await validator.run_full_validation()
    
    # Exit code baseado no sucesso
    success_rate = (sum(1 for result in results.values() if result) / len(results)) * 100
    sys.exit(0 if success_rate >= 70 else 1)


if __name__ == "__main__":
    asyncio.run(main())