"""
Configura√ß√£o da base de dados PostgreSQL
Sistema Universal de Gest√£o de Eventos
"""

import os
from sqlalchemy import create_engine, MetaData
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import StaticPool
import logging
from typing import Generator
import asyncpg
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker

# Configura√ß√£o de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Base para os modelos
Base = declarative_base()

# ================================
# CONFIGURA√á√ïES DO BANCO
# ================================

# Configura√ß√µes do banco de dados
DATABASE_CONFIG = {
    "host": os.getenv("DB_HOST", "localhost"),
    "port": os.getenv("DB_PORT", "5432"),
    "database": os.getenv("DB_NAME", "eventos_db"),
    "username": os.getenv("DB_USER", "eventos_user"),
    "password": os.getenv("DB_PASSWORD", "eventos_2024_secure!"),
}

# URLs de conex√£o
SYNC_DATABASE_URL = (
    f"postgresql://{DATABASE_CONFIG['username']}:{DATABASE_CONFIG['password']}"
    f"@{DATABASE_CONFIG['host']}:{DATABASE_CONFIG['port']}/{DATABASE_CONFIG['database']}"
)

ASYNC_DATABASE_URL = (
    f"postgresql+asyncpg://{DATABASE_CONFIG['username']}:{DATABASE_CONFIG['password']}"
    f"@{DATABASE_CONFIG['host']}:{DATABASE_CONFIG['port']}/{DATABASE_CONFIG['database']}"
)

# Override com vari√°vel de ambiente se dispon√≠vel
DATABASE_URL = os.getenv("DATABASE_URL", SYNC_DATABASE_URL)
ASYNC_DATABASE_URL_ENV = os.getenv("ASYNC_DATABASE_URL", ASYNC_DATABASE_URL)

# ================================
# ENGINES E SESS√ïES S√çNCRONAS
# ================================

# Configura√ß√µes do engine
ENGINE_CONFIG = {
    "pool_size": 20,
    "max_overflow": 30,
    "pool_timeout": 30,
    "pool_recycle": 1800,  # 30 minutos
    "pool_pre_ping": True,
    "echo": os.getenv("DEBUG", "false").lower() == "true",
}

# Engine s√≠ncrono
engine = create_engine(DATABASE_URL, **ENGINE_CONFIG)

# SessionLocal para sess√µes s√≠ncronas
SessionLocal = sessionmaker(
    bind=engine,
    autocommit=False,
    autoflush=False,
    expire_on_commit=False
)

# ================================
# ENGINES E SESS√ïES ASS√çNCRONAS
# ================================

# Engine ass√≠ncrono
async_engine = create_async_engine(
    ASYNC_DATABASE_URL_ENV,
    pool_size=20,
    max_overflow=30,
    pool_timeout=30,
    pool_recycle=1800,
    pool_pre_ping=True,
    echo=os.getenv("DEBUG", "false").lower() == "true",
)

# SessionLocal ass√≠ncrona
AsyncSessionLocal = async_sessionmaker(
    bind=async_engine,
    class_=AsyncSession,
    autocommit=False,
    autoflush=False,
    expire_on_commit=False
)

# ================================
# DEPENDENCY INJECTION
# ================================

def get_db() -> Generator:
    """
    Dependency injection para FastAPI - Sess√µes s√≠ncronas
    
    Yields:
        Session: Sess√£o do SQLAlchemy
    """
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"Erro na sess√£o do banco: {e}")
        db.rollback()
        raise
    finally:
        db.close()

async def get_async_db() -> Generator:
    """
    Dependency injection para FastAPI - Sess√µes ass√≠ncronas
    
    Yields:
        AsyncSession: Sess√£o ass√≠ncrona do SQLAlchemy
    """
    async with AsyncSessionLocal() as session:
        try:
            yield session
        except Exception as e:
            logger.error(f"Erro na sess√£o ass√≠ncrona do banco: {e}")
            await session.rollback()
            raise
        finally:
            await session.close()

# ================================
# FUN√á√ïES DE UTILIDADE
# ================================

def create_tables():
    """
    Cria todas as tabelas no banco de dados
    """
    try:
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ Tabelas criadas com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro ao criar tabelas: {e}")
        raise

def drop_tables():
    """
    Remove todas as tabelas do banco de dados
    ‚ö†Ô∏è CUIDADO: Isso apagar√° todos os dados!
    """
    try:
        Base.metadata.drop_all(bind=engine)
        logger.info("üóëÔ∏è Tabelas removidas com sucesso!")
    except Exception as e:
        logger.error(f"‚ùå Erro ao remover tabelas: {e}")
        raise

async def test_connection():
    """
    Testa a conex√£o com o banco de dados
    
    Returns:
        bool: True se a conex√£o foi bem-sucedida
    """
    try:
        # Teste s√≠ncrono
        with engine.connect() as conn:
            result = conn.execute("SELECT 1")
            assert result.fetchone()[0] == 1
        
        # Teste ass√≠ncrono
        async with async_engine.connect() as conn:
            result = await conn.execute("SELECT 1")
            row = result.fetchone()
            assert row[0] == 1
        
        logger.info("‚úÖ Conex√£o com banco de dados OK!")
        return True
    
    except Exception as e:
        logger.error(f"‚ùå Erro na conex√£o com banco: {e}")
        return False

def get_database_info():
    """
    Retorna informa√ß√µes sobre o banco de dados
    
    Returns:
        dict: Informa√ß√µes do banco
    """
    return {
        "host": DATABASE_CONFIG["host"],
        "port": DATABASE_CONFIG["port"],
        "database": DATABASE_CONFIG["database"],
        "username": DATABASE_CONFIG["username"],
        "engine_pool_size": engine.pool.size(),
        "engine_checked_out": engine.pool.checkedout(),
        "async_engine_available": async_engine is not None,
    }

# ================================
# TRANSA√á√ïES E CONTEXTOS
# ================================

class DatabaseTransaction:
    """
    Context manager para transa√ß√µes de banco de dados
    """
    
    def __init__(self, session=None):
        self.session = session or SessionLocal()
        self.should_close = session is None
    
    def __enter__(self):
        return self.session
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        if exc_type:
            self.session.rollback()
        else:
            self.session.commit()
        
        if self.should_close:
            self.session.close()

class AsyncDatabaseTransaction:
    """
    Context manager ass√≠ncrono para transa√ß√µes
    """
    
    def __init__(self, session=None):
        self.session = session
        self.should_close = session is None
    
    async def __aenter__(self):
        if self.session is None:
            self.session = AsyncSessionLocal()
        return self.session
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if exc_type:
            await self.session.rollback()
        else:
            await self.session.commit()
        
        if self.should_close:
            await self.session.close()

# ================================
# HEALTH CHECK
# ================================

async def health_check():
    """
    Verifica a sa√∫de da conex√£o com o banco
    
    Returns:
        dict: Status da conex√£o
    """
    try:
        start_time = time.time()
        
        # Teste de conectividade
        async with async_engine.connect() as conn:
            await conn.execute("SELECT 1")
        
        response_time = (time.time() - start_time) * 1000  # em ms
        
        return {
            "status": "healthy",
            "response_time_ms": round(response_time, 2),
            "database": DATABASE_CONFIG["database"],
            "host": DATABASE_CONFIG["host"],
            "timestamp": datetime.utcnow().isoformat()
        }
    
    except Exception as e:
        return {
            "status": "unhealthy",
            "error": str(e),
            "database": DATABASE_CONFIG["database"],
            "host": DATABASE_CONFIG["host"],
            "timestamp": datetime.utcnow().isoformat()
        }

# ================================
# INICIALIZA√á√ÉO
# ================================

def init_database():
    """
    Inicializa o banco de dados com configura√ß√µes b√°sicas
    """
    try:
        logger.info("üîÑ Inicializando banco de dados...")
        
        # Criar tabelas se n√£o existirem
        create_tables()
        
        # Configura√ß√µes b√°sicas do PostgreSQL
        with engine.connect() as conn:
            # Configurar timezone
            conn.execute("SET timezone = 'America/Sao_Paulo'")
            
            # Instalar extens√µes necess√°rias (se n√£o existirem)
            try:
                conn.execute("CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\"")
                conn.execute("CREATE EXTENSION IF NOT EXISTS \"pgcrypto\"")
                conn.execute("CREATE EXTENSION IF NOT EXISTS \"unaccent\"")
                logger.info("‚úÖ Extens√µes PostgreSQL verificadas")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è N√£o foi poss√≠vel instalar extens√µes: {e}")
        
        logger.info("‚úÖ Banco de dados inicializado com sucesso!")
        
    except Exception as e:
        logger.error(f"‚ùå Erro na inicializa√ß√£o do banco: {e}")
        raise

# Importa√ß√µes tardias para evitar depend√™ncias circulares
import time
from datetime import datetime

# Metadata para migra√ß√µes
metadata = MetaData()

# Configura√ß√µes de logging para SQLAlchemy
if os.getenv("DEBUG", "false").lower() == "true":
    logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)

# Teste de inicializa√ß√£o (apenas para desenvolvimento)
if __name__ == "__main__":
    import asyncio
    
    async def main():
        print("üîç Testando conex√µes...")
        
        # Teste s√≠ncrono
        try:
            with engine.connect() as conn:
                result = conn.execute("SELECT version()")
                version = result.fetchone()[0]
                print(f"‚úÖ PostgreSQL Sync: {version}")
        except Exception as e:
            print(f"‚ùå Erro Sync: {e}")
        
        # Teste ass√≠ncrono
        health = await health_check()
        print(f"üè• Health Check: {health}")
        
        # Informa√ß√µes do banco
        info = get_database_info()
        print(f"üìä Database Info: {info}")
    
    asyncio.run(main())
