"""
Sistema Universal de Gest√£o de Eventos - Vers√£o Simplificada
FastAPI Backend com funcionalidades b√°sicas
"""

from fastapi import FastAPI, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager
import logging
import os

# Configura√ß√£o de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Base de dados
from app.database import create_tables

# Routers principais
from app.routers import (
    auth, usuarios, eventos, checkin,
    pdv, gamificacao, listas,
    analytics, financeiro, ranking
)

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerenciamento do ciclo de vida da aplica√ß√£o"""
    try:
        # Inicializa√ß√£o
        logger.info("üöÄ Iniciando Sistema Universal de Gest√£o de Eventos...")
        
        # Criar tabelas
        create_tables()
        logger.info("‚úÖ Base de dados inicializada")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Erro no ciclo de vida: {e}")
        raise
    finally:
        logger.info("üîÑ Finalizando aplica√ß√£o...")

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Sistema Universal de Gest√£o de Eventos",
    description="API completa para gest√£o de eventos, check-in, PDV e gamifica√ß√£o",
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# =============================================================================
# MIDDLEWARES
# =============================================================================

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Compress√£o
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Hosts confi√°veis
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["localhost", "127.0.0.1", "*.vercel.app"]
)

# =============================================================================
# ROUTERS
# =============================================================================

# Autentica√ß√£o
app.include_router(auth.router, prefix="/api/auth", tags=["Autentica√ß√£o"])

# Usu√°rios
app.include_router(usuarios.router, prefix="/api/usuarios", tags=["Usu√°rios"])

# Eventos
app.include_router(eventos.router, prefix="/api/eventos", tags=["Eventos"])

# Check-in
app.include_router(checkin.router, prefix="/api/checkin", tags=["Check-in"])

# PDV
app.include_router(pdv.router, prefix="/api/pdv", tags=["PDV"])

# Gamifica√ß√£o
app.include_router(gamificacao.router, prefix="/api/gamificacao", tags=["Gamifica√ß√£o"])

# Listas
app.include_router(listas.router, prefix="/api/listas", tags=["Listas"])

# Analytics
app.include_router(analytics.router, prefix="/api/analytics", tags=["Analytics"])

# Financeiro
app.include_router(financeiro.router, prefix="/api/financeiro", tags=["Financeiro"])

# Ranking
app.include_router(ranking.router, prefix="/api/ranking", tags=["Ranking"])

# =============================================================================
# ENDPOINTS ROOT
# =============================================================================

@app.get("/")
async def root():
    """Endpoint raiz"""
    return {
        "message": "Sistema Universal de Gest√£o de Eventos",
        "version": "2.0.0",
        "status": "active",
        "docs_url": "/docs"
    }

@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de b√°sica"""
    return {
        "status": "healthy",
        "message": "API funcionando corretamente"
    }

# =============================================================================
# HANDLERS DE ERRO
# =============================================================================

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Erro n√£o tratado: {exc}")
    return Response(
        content=f"Erro interno do servidor: {str(exc)}",
        status_code=500
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main_simples:app",
        host="127.0.0.1",
        port=8000,
        reload=True
    )
