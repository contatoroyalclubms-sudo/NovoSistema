#!/bin/bash

# Script de restaura√ß√£o de backup PostgreSQL

set -e

# Configura√ß√µes
DB_HOST="${DB_HOST:-postgres}"
DB_NAME="${DB_NAME:-eventos_db}"
DB_USER="${DB_USER:-eventos_user}"
DB_PASSWORD="${DB_PASSWORD}"
BACKUP_DIR="/backups"
LOG_DIR="/logs"
DATE=$(date +%Y%m%d_%H%M%S)
LOG_FILE="${LOG_DIR}/restore_${DATE}.log"

# Fun√ß√£o de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Fun√ß√£o de erro
error() {
    log "ERROR: $1"
    exit 1
}

# Ajuda
show_help() {
    echo "Uso: $0 [BACKUP_FILE]"
    echo ""
    echo "Restaura um backup do banco de dados PostgreSQL"
    echo ""
    echo "Argumentos:"
    echo "  BACKUP_FILE    Arquivo de backup para restaurar (opcional, usa latest.sql.gz se n√£o especificado)"
    echo ""
    echo "Exemplos:"
    echo "  $0                                    # Restaura o backup mais recente"
    echo "  $0 backup_eventos_db_20241201.sql.gz # Restaura backup espec√≠fico"
}

# Verificar argumentos
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
    show_help
    exit 0
fi

# Determinar arquivo de backup
if [ -n "$1" ]; then
    BACKUP_FILE="${BACKUP_DIR}/$1"
else
    BACKUP_FILE="${BACKUP_DIR}/latest.sql.gz"
fi

# Verificar se arquivo existe
if [ ! -f "$BACKUP_FILE" ]; then
    error "Arquivo de backup n√£o encontrado: $BACKUP_FILE"
fi

# Verificar vari√°veis obrigat√≥rias
if [ -z "$DB_PASSWORD" ]; then
    error "DB_PASSWORD n√£o definida"
fi

log "üîÑ Iniciando restaura√ß√£o do banco de dados $DB_NAME"
log "üìÅ Arquivo de backup: $(basename "$BACKUP_FILE")"

# Verificar conectividade com o banco
log "üîç Verificando conectividade com o banco..."
export PGPASSWORD="$DB_PASSWORD"

if ! pg_isready -h "$DB_HOST" -U "$DB_USER" -d "postgres" -t 30; then
    error "N√£o foi poss√≠vel conectar ao PostgreSQL"
fi

log "‚úÖ Conectividade verificada"

# Confirmar restaura√ß√£o
log "‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o ir√° SOBRESCREVER o banco de dados $DB_NAME"
log "üìÑ Arquivo: $(basename "$BACKUP_FILE")"
log "üìä Tamanho: $(du -h "$BACKUP_FILE" | cut -f1)"

# Em ambiente interativo, pedir confirma√ß√£o
if [ -t 0 ]; then
    read -p "Confirma a restaura√ß√£o? (digite 'CONFIRMO' para prosseguir): " confirm
    if [ "$confirm" != "CONFIRMO" ]; then
        log "‚ùå Restaura√ß√£o cancelada pelo usu√°rio"
        exit 1
    fi
fi

# Verificar integridade do backup
log "üîç Verificando integridade do backup..."
if ! gzip -t "$BACKUP_FILE"; then
    error "Arquivo de backup corrompido"
fi

log "‚úÖ Integridade verificada"

# Fazer backup de seguran√ßa antes da restaura√ß√£o
SAFETY_BACKUP="${BACKUP_DIR}/safety_backup_before_restore_${DATE}.sql.gz"
log "üíæ Criando backup de seguran√ßa atual..."

if pg_dump -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" --no-password | gzip > "$SAFETY_BACKUP"; then
    log "‚úÖ Backup de seguran√ßa criado: $(basename "$SAFETY_BACKUP")"
else
    log "‚ö†Ô∏è Falha ao criar backup de seguran√ßa, mas continuando..."
fi

# Encerrar conex√µes ativas com o banco
log "üîå Encerrando conex√µes ativas com o banco..."
psql -h "$DB_HOST" -U "$DB_USER" -d "postgres" -c "
    SELECT pg_terminate_backend(pid) 
    FROM pg_stat_activity 
    WHERE datname = '$DB_NAME' AND pid <> pg_backend_pid();
" || log "‚ö†Ô∏è Aviso ao encerrar conex√µes"

# Dropar e recriar banco
log "üóëÔ∏è Removendo banco existente..."
psql -h "$DB_HOST" -U "$DB_USER" -d "postgres" -c "DROP DATABASE IF EXISTS $DB_NAME;"

log "üÜï Criando novo banco..."
psql -h "$DB_HOST" -U "$DB_USER" -d "postgres" -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"

# Restaurar backup
log "üì• Restaurando backup..."
if gunzip -c "$BACKUP_FILE" | psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" --quiet; then
    log "‚úÖ Backup restaurado com sucesso!"
else
    error "Falha na restaura√ß√£o do backup"
fi

# Verificar restaura√ß√£o
log "üîç Verificando restaura√ß√£o..."
TABLE_COUNT=$(psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" | tr -d ' ')

if [ "$TABLE_COUNT" -gt 0 ]; then
    log "‚úÖ Restaura√ß√£o verificada: $TABLE_COUNT tabelas encontradas"
else
    error "Nenhuma tabela encontrada ap√≥s restaura√ß√£o"
fi

# Atualizar estat√≠sticas do banco
log "üìä Atualizando estat√≠sticas do banco..."
psql -h "$DB_HOST" -U "$DB_USER" -d "$DB_NAME" -c "ANALYZE;" || log "‚ö†Ô∏è Aviso ao atualizar estat√≠sticas"

log "üéâ Restaura√ß√£o conclu√≠da com sucesso!"
log "üíæ Backup de seguran√ßa mantido em: $(basename "$SAFETY_BACKUP")"

# Opcional: Enviar notifica√ß√£o
if [ -n "$WEBHOOK_URL" ]; then
    curl -X POST "$WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d "{\"message\": \"Restaura√ß√£o de $DB_NAME conclu√≠da com sucesso\", \"backup_file\": \"$(basename "$BACKUP_FILE")\"}" \
        || log "‚ö†Ô∏è Falha ao enviar notifica√ß√£o"
fi
