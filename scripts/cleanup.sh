#!/bin/bash

# Script de limpeza de backups antigos

set -e

# Configura√ß√µes
BACKUP_DIR="/backups"
LOG_DIR="/logs"
RETENTION_DAYS="${BACKUP_RETENTION_DAYS:-30}"
DATE=$(date +%Y%m%d_%H%M%S)
LOG_FILE="${LOG_DIR}/cleanup_${DATE}.log"

# Fun√ß√£o de log
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

log "üßπ Iniciando limpeza de backups antigos"
log "üìÅ Diret√≥rio: $BACKUP_DIR"
log "‚è∞ Reten√ß√£o: $RETENTION_DAYS dias"

# Verificar se diret√≥rio existe
if [ ! -d "$BACKUP_DIR" ]; then
    log "‚ùå Diret√≥rio de backup n√£o encontrado: $BACKUP_DIR"
    exit 1
fi

# Contar backups atuais
TOTAL_BACKUPS=$(find "$BACKUP_DIR" -name "backup_*.sql.gz" -type f | wc -l)
log "üìä Total de backups encontrados: $TOTAL_BACKUPS"

# Encontrar backups antigos
OLD_BACKUPS=$(find "$BACKUP_DIR" -name "backup_*.sql.gz" -type f -mtime +$RETENTION_DAYS)

if [ -z "$OLD_BACKUPS" ]; then
    log "‚úÖ Nenhum backup antigo encontrado para limpeza"
    exit 0
fi

# Contar backups antigos
OLD_COUNT=$(echo "$OLD_BACKUPS" | wc -l)
log "üóëÔ∏è Backups antigos encontrados: $OLD_COUNT"

# Calcular espa√ßo a ser liberado
SPACE_TO_FREE=0
while IFS= read -r file; do
    if [ -f "$file" ]; then
        SIZE=$(du -b "$file" | cut -f1)
        SPACE_TO_FREE=$((SPACE_TO_FREE + SIZE))
        log "üìÑ Marcado para remo√ß√£o: $(basename "$file") ($(du -h "$file" | cut -f1))"
    fi
done <<< "$OLD_BACKUPS"

# Converter para formato leg√≠vel
SPACE_MB=$((SPACE_TO_FREE / 1024 / 1024))
log "üíΩ Espa√ßo a ser liberado: ${SPACE_MB}MB"

# Remover backups antigos
REMOVED_COUNT=0
while IFS= read -r file; do
    if [ -f "$file" ]; then
        if rm "$file"; then
            log "‚úÖ Removido: $(basename "$file")"
            REMOVED_COUNT=$((REMOVED_COUNT + 1))
        else
            log "‚ùå Erro ao remover: $(basename "$file")"
        fi
    fi
done <<< "$OLD_BACKUPS"

# Limpar logs antigos tamb√©m
log "üßπ Limpando logs antigos..."
OLD_LOGS=$(find "$LOG_DIR" -name "*.log" -type f -mtime +$RETENTION_DAYS)

if [ -n "$OLD_LOGS" ]; then
    OLD_LOGS_COUNT=$(echo "$OLD_LOGS" | wc -l)
    log "üóëÔ∏è Logs antigos encontrados: $OLD_LOGS_COUNT"
    
    while IFS= read -r logfile; do
        if [ -f "$logfile" ]; then
            if rm "$logfile"; then
                log "‚úÖ Log removido: $(basename "$logfile")"
            else
                log "‚ùå Erro ao remover log: $(basename "$logfile")"
            fi
        fi
    done <<< "$OLD_LOGS"
else
    log "‚úÖ Nenhum log antigo encontrado"
fi

# Limpar backups de seguran√ßa muito antigos (dobro do per√≠odo de reten√ß√£o)
SAFETY_RETENTION=$((RETENTION_DAYS * 2))
OLD_SAFETY_BACKUPS=$(find "$BACKUP_DIR" -name "safety_backup_*.sql.gz" -type f -mtime +$SAFETY_RETENTION)

if [ -n "$OLD_SAFETY_BACKUPS" ]; then
    OLD_SAFETY_COUNT=$(echo "$OLD_SAFETY_BACKUPS" | wc -l)
    log "üóëÔ∏è Backups de seguran√ßa muito antigos: $OLD_SAFETY_COUNT"
    
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            if rm "$file"; then
                log "‚úÖ Backup de seguran√ßa removido: $(basename "$file")"
            else
                log "‚ùå Erro ao remover backup de seguran√ßa: $(basename "$file")"
            fi
        fi
    done <<< "$OLD_SAFETY_BACKUPS"
else
    log "‚úÖ Nenhum backup de seguran√ßa muito antigo encontrado"
fi

# Verificar espa√ßo em disco ap√≥s limpeza
AVAILABLE_SPACE=$(df -h "$BACKUP_DIR" | awk 'NR==2 {print $4}')
USED_SPACE=$(df -h "$BACKUP_DIR" | awk 'NR==2 {print $3}')

log "üíΩ Espa√ßo dispon√≠vel ap√≥s limpeza: $AVAILABLE_SPACE"
log "üíΩ Espa√ßo utilizado: $USED_SPACE"

# Contar backups restantes
REMAINING_BACKUPS=$(find "$BACKUP_DIR" -name "backup_*.sql.gz" -type f | wc -l)
log "üìä Backups restantes: $REMAINING_BACKUPS"

log "üéâ Limpeza conclu√≠da!"
log "üìä Resumo:"
log "   - Backups removidos: $REMOVED_COUNT"
log "   - Espa√ßo liberado: ${SPACE_MB}MB"
log "   - Backups restantes: $REMAINING_BACKUPS"

# Verificar se h√° poucos backups restantes
if [ "$REMAINING_BACKUPS" -lt 7 ]; then
    log "‚ö†Ô∏è ATEN√á√ÉO: Poucos backups restantes ($REMAINING_BACKUPS). Considere ajustar a pol√≠tica de reten√ß√£o."
fi

# Opcional: Enviar relat√≥rio
if [ -n "$WEBHOOK_URL" ]; then
    curl -X POST "$WEBHOOK_URL" \
        -H "Content-Type: application/json" \
        -d "{\"message\": \"Limpeza de backups conclu√≠da\", \"removed\": $REMOVED_COUNT, \"remaining\": $REMAINING_BACKUPS, \"space_freed_mb\": $SPACE_MB}" \
        || log "‚ö†Ô∏è Falha ao enviar relat√≥rio"
fi
