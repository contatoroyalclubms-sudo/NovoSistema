# Docker Compose para produção
version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eventos_postgres_prod
    environment:
      POSTGRES_DB: eventos_db
      POSTGRES_USER: eventos_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventos_user -d eventos_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - eventos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: eventos_redis_prod
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - eventos_network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend FastAPI (produção)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: eventos_backend_prod
    environment:
      - DATABASE_URL=postgresql://eventos_user:${DB_PASSWORD}@postgres:5432/eventos_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Frontend React (produção)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - VITE_API_URL=${VITE_API_URL}
        - VITE_WS_URL=${VITE_WS_URL}
        - VITE_APP_NAME=${VITE_APP_NAME}
        - VITE_APP_VERSION=${VITE_APP_VERSION}
    container_name: eventos_frontend_prod
    depends_on:
      - backend
    networks:
      - eventos_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx Load Balancer e Proxy
  nginx:
    image: nginx:alpine
    container_name: eventos_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - eventos_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backup automatizado
  backup:
    build:
      context: ./scripts
      dockerfile: Dockerfile.backup
    container_name: eventos_backup
    environment:
      - DB_HOST=postgres
      - DB_NAME=eventos_db
      - DB_USER=eventos_user
      - DB_PASSWORD=${DB_PASSWORD}
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
    volumes:
      - ./backups:/backups
      - ./logs:/logs
    depends_on:
      - postgres
    networks:
      - eventos_network
    restart: unless-stopped

  # Monitoramento com Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: eventos_prometheus_prod
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    networks:
      - eventos_network
    restart: unless-stopped

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: eventos_grafana_prod
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_SECRET_KEY=${GRAFANA_SECRET_KEY}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - eventos_network
    restart: unless-stopped

  # Node Exporter para métricas do sistema
  node-exporter:
    image: prom/node-exporter:latest
    container_name: eventos_node_exporter
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    networks:
      - eventos_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  eventos_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

# Configuração para deploy com Docker Swarm
configs:
  nginx_config:
    file: ./nginx/nginx.prod.conf
  prometheus_config:
    file: ./monitoring/prometheus.prod.yml

secrets:
  db_password:
    external: true
  secret_key:
    external: true
  grafana_password:
    external: true
