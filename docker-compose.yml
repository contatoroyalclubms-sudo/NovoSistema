version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: eventos_postgres
    environment:
      POSTGRES_DB: eventos_db
      POSTGRES_USER: eventos_user
      POSTGRES_PASSWORD: eventos_2024_secure!
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventos_user -d eventos_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - eventos_network
    restart: unless-stopped

  # Redis para cache e sessões
  redis:
    image: redis:7-alpine
    container_name: eventos_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - eventos_network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Backend FastAPI (desenvolvimento)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: eventos_backend
    environment:
      - DATABASE_URL=postgresql://eventos_user:eventos_2024_secure!@postgres:5432/eventos_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=development
      - DEBUG=true
      - SECRET_KEY=docker-development-key-not-for-production
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_deps:/app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - eventos_network
    restart: unless-stopped
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React (desenvolvimento)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: eventos_frontend
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
      - VITE_APP_NAME=Sistema de Gestão de Eventos
      - VITE_APP_VERSION=1.0.0
      - VITE_ENVIRONMENT=development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_deps:/app/node_modules
    depends_on:
      - backend
    networks:
      - eventos_network
    restart: unless-stopped
    command: npm run dev -- --host 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Proxy (produção)
  nginx:
    image: nginx:alpine
    container_name: eventos_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - eventos_network
    restart: unless-stopped
    profiles:
      - production

  # PgAdmin para gerenciamento do banco
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: eventos_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@eventos.local
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - eventos_network
    restart: unless-stopped
    profiles:
      - tools

  # Prometheus para monitoramento
  prometheus:
    image: prom/prometheus:latest
    container_name: eventos_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - eventos_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana para visualização
  grafana:
    image: grafana/grafana:latest
    container_name: eventos_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - eventos_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_deps:
    driver: local
  frontend_deps:
    driver: local
  pgadmin_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  eventos_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
