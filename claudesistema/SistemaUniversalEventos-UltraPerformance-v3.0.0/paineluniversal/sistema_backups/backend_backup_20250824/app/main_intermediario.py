"""
Sistema Universal de Gest√£o de Eventos - Vers√£o Intermedi√°ria
FastAPI Backend com funcionalidades principais
"""

from fastapi import FastAPI, Request, Response, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.gzip import GZipMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from contextlib import asynccontextmanager
import logging
import os

# Configura√ß√£o de logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Base de dados
from app.database import create_tables

# Routers principais - importa√ß√£o individual para evitar conflitos
from app.routers.auth import router as auth_router
from app.routers.usuarios import router as usuarios_router
from app.routers.eventos import router as eventos_router

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerenciamento do ciclo de vida da aplica√ß√£o"""
    try:
        # Inicializa√ß√£o
        logger.info("üöÄ Iniciando Sistema Universal - Vers√£o Intermedi√°ria...")
        
        # Criar tabelas
        create_tables()
        logger.info("‚úÖ Base de dados inicializada")
        
        yield
        
    except Exception as e:
        logger.error(f"‚ùå Erro no ciclo de vida: {e}")
        raise
    finally:
        logger.info("üîÑ Finalizando aplica√ß√£o...")

# Criar aplica√ß√£o FastAPI
app = FastAPI(
    title="Sistema Universal de Gest√£o de Eventos - Intermedi√°rio",
    description="API com funcionalidades principais para gest√£o de eventos",
    version="2.1.0",
    docs_url="/docs",
    redoc_url="/redoc",
    lifespan=lifespan
)

# =============================================================================
# MIDDLEWARES
# =============================================================================

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Compress√£o
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Hosts confi√°veis
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["localhost", "127.0.0.1", "*.vercel.app"]
)

# =============================================================================
# ROUTERS PRINCIPAIS
# =============================================================================

# Autentica√ß√£o
app.include_router(auth_router, prefix="/api/auth", tags=["Autentica√ß√£o"])

# Usu√°rios
app.include_router(usuarios_router, prefix="/api/usuarios", tags=["Usu√°rios"])

# Eventos
app.include_router(eventos_router, prefix="/api/eventos", tags=["Eventos"])

# =============================================================================
# ENDPOINTS ROOT
# =============================================================================

@app.get("/")
async def root():
    """Endpoint raiz"""
    return {
        "message": "Sistema Universal de Gest√£o de Eventos - Intermedi√°rio",
        "version": "2.1.0",
        "status": "active",
        "features": ["auth", "usuarios", "eventos"],
        "docs_url": "/docs"
    }

@app.get("/health")
async def health_check():
    """Verifica√ß√£o de sa√∫de"""
    return {
        "status": "healthy",
        "message": "API funcionando com funcionalidades principais",
        "database": "connected",
        "features_active": ["authentication", "users", "events"]
    }

@app.get("/api/status")
async def api_status():
    """Status detalhado da API"""
    try:
        # Teste b√°sico de banco
        from app.database import SessionLocal
        from sqlalchemy import text
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        db.close()
        database_status = "connected"
    except Exception as e:
        database_status = f"error: {str(e)}"
    
    return {
        "api": "Sistema Universal de Eventos",
        "version": "2.1.0",
        "status": "operational",
        "database": database_status,
        "endpoints": {
            "auth": "/api/auth/",
            "usuarios": "/api/usuarios/",
            "eventos": "/api/eventos/",
            "docs": "/docs"
        }
    }

# =============================================================================
# HANDLERS DE ERRO
# =============================================================================

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Erro n√£o tratado: {exc}")
    return Response(
        content=f"Erro interno do servidor: {str(exc)}",
        status_code=500
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main_intermediario:app",
        host="127.0.0.1",
        port=8002,
        reload=True
    )
