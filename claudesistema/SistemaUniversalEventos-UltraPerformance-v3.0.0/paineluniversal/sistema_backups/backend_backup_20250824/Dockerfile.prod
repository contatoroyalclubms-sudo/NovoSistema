FROM python:3.12-slim as builder

# Instalar dependências de build
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Instalar Poetry
RUN pip install poetry

# Configurar Poetry para produção
RUN poetry config virtualenvs.create true \
    && poetry config virtualenvs.in-project true

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências
COPY pyproject.toml poetry.lock ./

# Instalar dependências de produção
RUN poetry install --only=main --no-root

# Stage de produção
FROM python:3.12-slim

# Instalar dependências do sistema para produção
RUN apt-get update && apt-get install -y \
    postgresql-client \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Criar usuário não-root
RUN useradd --create-home --shell /bin/bash --uid 1000 app

# Definir diretório de trabalho
WORKDIR /app

# Copiar ambiente virtual do builder
COPY --from=builder /app/.venv /app/.venv

# Copiar código da aplicação
COPY . .

# Criar diretórios necessários
RUN mkdir -p logs uploads static

# Ajustar permissões
RUN chown -R app:app /app

# Trocar para usuário não-root
USER app

# Definir PATH para usar o ambiente virtual
ENV PATH="/app/.venv/bin:$PATH"

# Expor porta
EXPOSE 8002

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8002/health || exit 1

# Comando de inicialização
CMD ["python", "-m", "uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8002", "--workers", "4"]
